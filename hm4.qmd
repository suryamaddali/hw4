---
title: "Homework 4"
author: "[Insert your name here]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: pdf
# format: pdf
---

---

::: {.callout-important style="font-size: 0.8em;"}

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::


We will be using the following libraries:

```{R}
packages <- c(
  "dplyr", 
  "readr", 
  "tidyr", 
  "purrr", 
  "stringr", 
  "corrplot", 
  "car", 
  "caret", 
  "torch", 
  "nnet", 
  "broom"
)

 #renv::install(packages)
sapply(packages, require, character.only=T)
```

<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 30 points
Automatic differentiation using `torch`
:::

###### 1.1 (5 points)

Consider $g(x, y)$ given by
$$
g(x, y) = (x - 3)^2 + (y - 4)^2.
$$

Using elementary calculus derive the expressions for

$$
\frac{d}{dx}g(x, y), \quad \text{and} \quad \frac{d}{dy}g(x, y).
$$
## Derivative with respect to x
$$
\frac{d}{dx}g(x, y) = 2(x-3) + (y - 4)^2
$$
## Derivative with respect to y
$$
\frac{d}{dy}g(x, y) = (x-3)^2 + 2(y - 4)
$$

Using your answer from above, what is the answer to
$$
\frac{d}{dx}g(x, y) \Bigg|_{(x=3, y=4)} \quad \text{and} \quad \frac{d}{dy}g(x, y) \Bigg|_{(x=3, y=4)} ?
$$

The answer for both is 0.


Define $g(x, y)$ as a function in R, compute the gradient of $g(x, y)$ with respect to $x=3$ and $y=4$. Does the answer match what you expected?
```{R}
x <- torch_tensor(3, requires_grad = TRUE)
y <- torch_tensor(4, requires_grad = TRUE)

a <- (x - 3)^2 + (y - 4)^2
a$backward()

x$grad
y$grad


```
The answer does indeed match what I expected.

---

###### 1.2 (10 points)


$$\newcommand{\u}{\boldsymbol{u}}\newcommand{\v}{\boldsymbol{v}}$$

Consider $h(\u, \v)$ given by
$$
h(\u, \v) = (\u \cdot \v)^3,
$$
where $\u \cdot \v$ denotes the dot product of two vectors, i.e., $\u \cdot \v = \sum_{i=1}^n u_i v_i.$

Using elementary calculus derive the expressions for the gradients

$$
\begin{aligned}
\nabla_\u h(\u, \v) &= \Bigg(\frac{d}{du_1}h(\u, \v), \frac{d}{du_2}h(\u, \v), \dots, \frac{d}{du_n}h(\u, \v)\Bigg)
\end{aligned}
$$
$$
\frac{d}{du_n}h(\u, \v) = 3u^2v^3
$$


Using your answer from above, what is the answer to $\nabla_\u h(\u, \v)$ when $n=10$ and

$$
\begin{aligned}
\u = (-1, +1, -1, +1, -1, +1, -1, +1, -1, +1)\\
\v = (-1, -1, -1, -1, -1, +1, +1, +1, +1, +1)
\end{aligned}
$$
$$
u * v= 2
$$

$$
\frac{d}{du_10}h(\u, \v) = 3(2)^2(2)^3 = 96
$$


Define $h(\u, \v)$ as a function in R, initialize the two vectors $\u$ and $\v$ as `torch_tensor`s. Compute the gradient of $h(\u, \v)$ with respect to $\u$. Does the answer match what you expected?
```{R}

func <- function(u,v){
3*u^3*v^3  
}

u <- torch_tensor(2, requires_grad = TRUE)

v <- torch_tensor(2, requires_grad = TRUE)

uv <- func(u,v)

uv$backward()

u$grad
v$grad

```


---

###### 1.3 (5 points)

Consider the following function
$$
f(z) = z^4 - 6z^2 - 3z + 4
$$

Derive the expression for 
$$
f'(z_0) = \frac{df}{dz}\Bigg|_{z=z_0}
$$
and evaluate $f'(z_0)$ when $z_0 = -3.5$.

$$
f'(z_0) = 4z_0^3-12z_0-3
$$
$$
f'(-3.5) = 4(-3.5)^3-12(-3.5)-3 = -132.5
$$


Define $f(z)$ as a function in R, and using the `torch` library compute $f'(-3.5)$. 
```{R}

f <- function(z){
  z^4 - 6*(z)^2 - 3*(z)+4
}

x <- torch_tensor(-3.5, requires_grad = TRUE)

z0 <- f(x)

z0$backward()

x$grad




```


---

###### 1.4 (5 points)

For the same function $f$, initialize $z[1] = -3.5$, and perform $n=100$ iterations of **gradient descent**, i.e., 

> $z[{k+1}] = z[k] - \eta f'(z[k]) \ \ \ \ $ for $k = 1, 2, \dots, 100$

Plot the curve $f$ and add taking $\eta = 0.02$, add the points $\{z_0, z_1, z_2, \dots z_{100}\}$ obtained using gradient descent to the plot. What do you observe?
```{R}

derived_function <- function(z){
  4*(z^3)-12*(z)-3
}

eta = 0.02
n = 100

x <- rep(0, n)
x[1] <- -3.5

for (i in 1:n){
  x[i+1] <- x[i]-(eta*derived_function(x[i]))
}

plot(seq(1,101), x)


```
I observe that the plot started leveling out right below x = -1.5.
---

###### 1.5 (5 points)


Redo the same analysis as **Question 1.4**, but this time using $\eta = 0.03$. What do you observe? What can you conclude from this analysis
```{R}

derived_function2 <- function(z){
  4*(z^3)-12*(z)-3
}

eta2 = 0.03
n2 = 100

x2 <- rep(0, n)
x2[1] <- -3.5

for (i in 1:n){
  x2[i+1] <- x2[i]-(eta2*derived_function2(x[i]))
}

plot(seq(1,101), x2)





```
I noticed that the dropoff occurs between 0 and -1 and about at -0.75.  I can conclude that the descent is overall greater and less pronounced when the eta value increases.



<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 50 points
Logistic regression and interpretation of effect sizes
:::

For this question we will use the **Titanic** dataset from the Stanford data archive. This dataset contains information about passengers aboard the Titanic and whether or not they survived. 


---

###### 2.1 (5 points)

Read the data from the following URL as a tibble in R. Preprocess the data such that the variables are of the right data type, e.g., binary variables are encoded as factors, and convert all column names to lower case for consistency. Let's also rename the response variable `Survival` to `y` for convenience.

```{R}
url <- "https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv"

df <- read.csv(url)

#Pre-Processing
df <- df %>% mutate_at("Survived", factor) %>% rename(y = Survived) %>% mutate_at("Pclass", factor)

names(df) <- tolower(names(df))

df
```

---

###### 2.2 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
df_numeric <- df %>% select(age, siblings.spouses.aboard, parents.children.aboard, fare)

corrplot(cor(df_numeric))
```



---

###### 2.3 (10 points)

Fit a logistic regression model to predict the probability of surviving the titanic as a function of:

* `pclass`
* `sex`
* `age`
* `fare`
* `# siblings`
* `# parents`


```{R}

df_logistic <- df %>% select(-name)

full_model <- glm(y ~ ., data = df_logistic, family = "binomial")
summary(full_model)
```

---

###### 2.4 (30 points)

Provide an interpretation for the slope and intercept terms estimated in `full_model` in terms of the log-odds of survival in the titanic and in terms of the odds-ratio (if the covariate is also categorical).

The intercept is 4.10977, which is the log-odds of the outcome(response variable y, survival) when all of the numeric predictors are set equal to 0(all of the non-factor and character variables which are age, siblings.spouses.aboard, parents.children.aboard, fare).

Going in order, if the passenger is in the second class, their log odds of surviving would decrease by 1.161.

If the passenger is in the third class, their log odds of surviving would decrease by 2.35.

If the passenger is of the male sex, their log odds of surviving would decrease by 2.757.

As the age of a passenger increases by one, the log odds of survival decreases by 0.04.

As the number of siblings or spouses aboard for a passenger increases by one, the log odds of survival decreases by 0.402.

As the number of parents or children aboard for a passenger increases by one, the log odds of survival decreases by 0.107.

As the fare increases by 1, the log odds of survival increases by 0.00283.



::: {.callout-hint}
## 
Recall the definition of logistic regression from the lecture notes, and also recall how we interpreted the slope in the linear regression model (particularly when the covariate was categorical).
:::


<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 70 points

Variable selection and logistic regression in `torch`

:::


---

###### 3.1 (15 points)

Complete the following function `overview` which takes in two categorical vectors (`predicted` and `expected`) and outputs:

* The prediction accuracy
* The prediction error
* The false positive rate, and
* The false negative rate

```{R}
overview <- function(predicted, expected){
    y <- table(expected,predicted)
    accuracy <- ((y[1] + y[4])/(y[1] + y[2] + y[3] + y[4])) * 100
    error <- (y[2] + y[3]) / (y[1] + y[2] + y[3] + y[4])
    total_false_positives <- y[3]
    total_true_positives <- y[4]
    total_false_negatives <- y[2]
    total_true_negatives <- y[1]
    false_positive_rate <- y[3] / (y[2] + y[1])
    false_negative_rate <- y[2]/(y[2] + y[4])
    return(
        data.frame(
            accuracy = accuracy, 
            error=error, 
            false_positive_rate = false_positive_rate, 
            false_negative_rate = false_negative_rate
        )
    )
}
```

You can check if your function is doing what it's supposed to do by evaluating

```{R}
overview(df$y, df$y)
```
and making sure that the accuracy is $100\%$ while the errors are $0\%$.
---

###### 3.2 (5 points)

Display an overview of the key performance metrics of `full_model`

```{R}

y_1 <- predict(full_model, type = 'response')
y_2 <- ifelse(y_1 < 0.5, 0, 1)


overview(y_2, df$y)

```

---

###### 3.3  (5 points)

Using backward-stepwise logistic regression, find a parsimonious altenative to `full_model`, and print its `overview`

```{R}
step_model <- step(full_model, direction = 'backward') 
summary(step_model)
```

```{R}
step_predictions <- predict(step_model, type = 'response')
y_4 <- ifelse(step_predictions < 0.5, 0, 1)
overview(y_4, df$y)
```

---

###### 3.4  (15 points)

Using the `caret` package, setup a **$5$-fold cross-validation** training method using the `caret::trainConrol()` function

```{R}
controls <- trainControl(method = "cv", number = 5)

```

Now, using `control`, perform $5$-fold cross validation using `caret::train()` to select the optimal $\lambda$ parameter for LASSO with logistic regression. 

Take the search grid for $\lambda$ to be in $\{ 2^{-20}, 2^{-19.5}, 2^{-19}, \dots, 2^{-0.5}, 2^{0} \}$.

```{R}
# Insert your code in the ... region
lasso_fit <- train(
  x = df%>%select(-y)%>%data.matrix(),
  y = df$y,
  method = 'glmnet',
  trControl = controls, 
  tuneGrid = expand.grid(
    alpha = 1,
    lambda = 2^seq(-20, 0, by = 0.5)
    ),
  family = 'binomial'
)
```
Using the information stored in `lasso_fit$results`, plot the results for  cross-validation accuracy vs. $log_2(\lambda)$. Choose the optimal $\lambda^*$, and report your results for this value of $\lambda^*$.

```{R}

results <- lasso_fit$results

plot(log2(results$lambda), results$Accuracy)

```
Since the point of dropoff is at (-3.0, 0.7858313), the optimal lambda would be 2^-3 = 0.125.

---

###### 3.5  (25 points)

First, use the `model.matrix()` function to convert the covariates of `df` to a matrix format

```{R}
covariate_matrix <- model.matrix(full_model)[, -1]
```

Now, initialize the covariates $X$ and the response $y$ as `torch` tensors

```{R}
X <- torch_tensor(covariate_matrix)
y <- torch_tensor(as.numeric(df$y)-1)
```

Using the `torch` library, initialize an `nn_module` which performs logistic regression for this dataset. (Remember that we have 6 different covariates)

```{R}
logistic <- nn_module(
  initialize = function() {
    self$f <- nn_linear(7,1)
    self$g <- nn_sigmoid()
  },
  forward = function(x) {
    covariate_matrix %>% self$f()%>%self$g()
  }
)

f <- logistic()
```

You can verify that your code is right by checking that the output to the following code is a vector of probabilities:

```{R}
f(X)
```


Now, define the loss function `Loss()` which takes in two tensors `X` and `y` and a function `Fun`, and outputs the **Binary cross Entropy loss** between `Fun(X)` and `y`. 

```{R}
Loss <- function(X, y, Fun){
  nn_bce_loss()(Fun(X), y)
}

```

Initialize an optimizer using `optim_adam()` and perform $n=1000$ steps of gradient descent in order to fit logistic regression using `torch`.

```{R}
f <- logistic()
optimizer <- optim_adam(f$parameters, lr = 0.01) 

n <- 1000
for (i in 1:n){
  loss <- Loss(X, y, f)
  
  optimizer$zero_grad()
  loss$backward()
  optimizer$step()
  
  if (i %% 20 == 0) {
    cat(sprintf("Epoch: %d, Loss: %.4f/n", i, loss$item()))
  }
}

```

Using the final, optimized parameters of `f`, compute the compute the predicted results on `X`

```{R}
predicted_probabilities <- f(X) %>% as_array()
torch_predictions <- ifelse(predicted_probabilities > 0.5, 1, 0)

overview(torch_predictions, df$y)
```

---

###### 3.6  (5 points)

Create a summary table of the `overview()` summary statistics for each of the $4$ models we have looked at in this assignment, and comment on their relative strengths and drawbacks.

```{R}

summary_table <- 
  rbind(overview(predict(lasso_fit), df$y), overview(y_2, df$y), overview(y_4, df$y), overview(torch_predictions, df$y))

summary_table



```

From this overview summary table of all four models, it can be concluded that the step model yields the hightest overall accuracy and lowest error as a result.  The lowest accuracy was yielded by the lasso model.  The highest false positive rate also belongs to the step model, while the highest false negative rate pertains to the lasso logistic model.

:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---



::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::